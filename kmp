#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

// 构建 KMP 算法的 next 数组
vector<int> build_next(string pattern) {
    vector<int> next(pattern.size(), 0);
    int i = 1;
    int pattern_len = 0;
    while (i < pattern.size()) {
        if (pattern[i] == pattern[pattern_len]) {
            pattern_len++;
            next[i] = pattern_len;
            i++;
        } else {
            if (pattern_len != 0) {
                pattern_len = next[pattern_len - 1];
            } else {
                next[i] = 0;
                i++;
            }
        }
    }
    return next;
}

// 使用 KMP 算法在文本中查找模式字符串
int kmp(string sentence, string pattern) {
    vector<int> next = build_next(pattern);
    int i = 0, j = 0;
    while (i < sentence.size()) {
        if (sentence[i] == pattern[j]) {
            i++;
            j++;
        }
        if (j == pattern.size()) {
            return j;  // 返回匹配的长度
        } else if (i < sentence.size() && sentence[i] != pattern[j]) {
            if (j != 0) {
                j = next[j - 1];
            } else {
                i++;
            }
        }
    }
    return j;  // 返回最长匹配的长度
}
int main() {
    string sentence, pattern;
    while (cin >> sentence) {
        pattern = sentence;
        reverse(pattern.begin(), pattern.end());
        int match_len = kmp(sentence, pattern);
        cout << sentence + pattern.substr(match_len) << endl;
    }
    return 0;
}
