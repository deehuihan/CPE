#include <vector>
#include <iostream>
#include <algorithm>
#include <set>
#include <tuple>
#include <sstream>
#include <stack>
#include <math.h>
#include <limits.h>
#include <iomanip>
#include <map>

using namespace std;


int main(){
    int t,m;
    while(cin>>t>>m){
        vector<int> nums(t);
        int total=0;
        int largest=0;
        for(int i=0;i<t;i++){
            cin>>nums[i];
            largest = max(largest, nums[i]);
            total += nums[i];
        }
        int left = largest, right = total; 
        while(left<right){
            int mid = (left+right)/2;
            int count = 1;
            int currentSum=0;
            for(int i=0;i<t;i++){
                if(currentSum + nums[i] <= mid){ 
                    currentSum += nums[i]; // 當 currentSum + nums[i] 還小於 mid 表示現在還不用增加一個新的 桶 m, 所以 currentSum 可以繼續疊加。
                }
                else{
                    count++;
                    /*
                    當 currentSum + nums[i] > mid 表示需要用一個新的桶來裝了，所以現在新的桶是目前 nums[i] 這個值，表示第一個桶裝前面的那個牛奶，
                    現在 count++ 新的桶就裝新的牛奶，所以新桶 currentSum = nums[i]
                    */
                    currentSum = nums[i];
                }
            }
            /*
            當所有牛奶都依照順序排列倒進去以後，檢查現在所使用的容量大小有沒有達標我們所設定的使用的容量數量 m。
            */
            if(count>m){  // 當我們使用 max -> mid -> total，然後使用的桶的數量超過我們所設定的 m 時候，表示我們要讓每一個裝牛奶容器的大小變大，所以必須往 mid -> total 這邊去考慮， 小於 mid 的容量大小如果用給訂的 m 桶數量一定會超過。
                left = mid+1;
            }
            else{
                right = mid; // 反之，當我們現在用 max -> mid -> total, 發現我們可以使用 m 的數量是 3，可是我們只用到 1， 表示我們設定的容量大小太大了，我們可以縮小容器大小以達到用 m 個桶來裝滿那些牛奶。
            }
        }
        cout<<left<<endl; // 一直計算到最後， left = mid+1 , 所以遲早會遇到 left = 82, right = 83, mid = 82, 這情況下到最後 left=mid+1 就會是 83， left 必須小於right，所以就表示 left就是當下最好的容器大小。
    }
    
}
